
import 'package:doa_driver_app/bloc/auth/auth_bloc.dart';
import 'package:doa_driver_app/bloc/delivery_update/delivery_update_bloc.dart';
import 'package:doa_driver_app/bloc/history/history_bloc.dart';
import 'package:doa_driver_app/bloc/lat_lng/latlng_bloc.dart';
import 'package:doa_driver_app/bloc/login/mobile_bloc.dart';
import 'package:doa_driver_app/bloc/online/online_bloc.dart';
import 'package:doa_driver_app/bloc/order/order_bloc.dart';
import 'package:doa_driver_app/bloc/order_status/check_order_status_bloc.dart';
import 'package:doa_driver_app/bloc/otp/otp_bloc.dart';
import 'package:doa_driver_app/bloc/payment/payment_bloc.dart';
import 'package:doa_driver_app/bloc/profile/profile_bloc.dart';
import 'package:doa_driver_app/bloc/shift/shift_bloc.dart';
import 'package:doa_driver_app/bloc/shifts_data/shifts_data_bloc.dart';
import 'package:doa_driver_app/bloc/shifts_data/shifts_data_event.dart';
import 'package:doa_driver_app/repos/auth_repo.dart';
import 'package:doa_driver_app/repos/check_order_status_repo.dart';
import 'package:doa_driver_app/repos/history_repo.dart';
import 'package:doa_driver_app/repos/mobile_repo.dart';
import 'package:doa_driver_app/repos/online_repo.dart';
import 'package:doa_driver_app/repos/order_repo.dart';
import 'package:doa_driver_app/repos/otp_repo.dart';
import 'package:doa_driver_app/repos/profile_repo.dart';
import 'package:doa_driver_app/repos/shifts_repo.dart';
import 'package:doa_driver_app/repos/update_delivery.dart';
import 'package:doa_driver_app/repos/update_shift_repo.dart';
import 'package:doa_driver_app/repos/updatelatlng_repo.dart';
import 'package:doa_driver_app/screens/splashscreen.dart';
import 'package:doa_driver_app/tweaks/location_service.dart';
import 'package:doa_driver_app/tweaks/notification_services.dart';
import 'package:doa_driver_app/utils/NotificationProvider.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
// core Flutter primitives
import 'package:flutter/foundation.dart';
// core FlutterFire dependency
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'constants/app_data.dart';
import 'firebase_options.dart';
// FlutterFire's Firebase Cloud Messaging plugin
import 'package:firebase_messaging/firebase_messaging.dart';
final navigatorKey = GlobalKey<NavigatorState>();

// generated by
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  FirebaseMessaging.onBackgroundMessage(firebaseMessagingBackgroundHandler);

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,

  );
  FirebaseMessaging messaging = FirebaseMessaging.instance;

  NotificationSettings settings = await messaging.requestPermission(
    alert: true,
    announcement: false,
    badge: true,
    carPlay: false,
    criticalAlert: false,
    provisional: false,
    sound: true,
  );

  runApp(
      RestartWidget(
    child: MultiBlocProvider(
      providers: [
        BlocProvider(create: (context) => AuthBloc(RealAuthRepo())),

        BlocProvider(create: (context) => MobileBloc(RealMobileRepo())),
        BlocProvider(create: (context) => OtpBloc(RealOtpRepo())),
        BlocProvider(create: (context) => OrdersBloc(RealOrderRepo()),),
        BlocProvider(create: (context) => HistoryBloc(RealHistoryRepo()),),
        BlocProvider(create: (context) => ShiftsDataBloc(RealShiftsRepo()),),
        BlocProvider(create: (context) => DeliveryUpdateBloc(RealDeliveryUpdateRepo()),),
        BlocProvider(create: (context) => OrderStatusBloc(RealOrderStatusRepo()),),
        BlocProvider(create: (context) => PaymentBloc(RealOrderStatusRepo()),),
        BlocProvider(create: (context) => UpdateShiftBloc((RealUpdateShiftRepo())),),
        BlocProvider(create: (context) => ProfileBloc((RealProfileRepo())),),
        BlocProvider(create: (context) => LatLngBloc((RealLatLngRepo())),),
      ],
      child: ChangeNotifierProvider(
        create: (_) => NotificationProvider(),
        child:  MyApp(),
      ),
    ),
  ));
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {

  @override
  void initState() {

    super.initState();

    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      if(navigatorKey.currentContext != null){
        showAlertDialog(navigatorKey.currentContext!);
        //navigatorKey.currentContext?.read<NotificationProvider>().handleNotification();

      }
    });
  }
  showAlertDialog(BuildContext context) {

    // set up the button
    Widget okButton = TextButton(
      child: const Text("Close"),
      onPressed: () {
        BlocProvider.of<OrdersBloc>(context).add(GetOrders(AppData.user!.id));
        BlocProvider.of<ShiftsDataBloc>(context).add(GetShiftsData(AppData.user!.id));
        Navigator.pop(context);
      },
    );

    // set up the AlertDialog
    AlertDialog alert = AlertDialog(
      title: const Text("New order assigned!"),
      content: const Text("Head to hub for collection. Thank you for your promptness!"),
      actions: [
        okButton,
      ],
    );

    // show the dialog
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return alert;
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
        create: (context) => LocationService(),
    child: MaterialApp(
      debugShowCheckedModeBanner: false,
      navigatorKey: navigatorKey,
      home: const MyHomePage(),
    ));
  }
}

class RestartWidget extends StatefulWidget {
  const RestartWidget({super.key,  required this.child});

  final Widget child;

  static void restartApp(BuildContext context) {
    context.findAncestorStateOfType<_RestartWidgetState>()?.restartApp();
  }

  @override
  _RestartWidgetState createState() => _RestartWidgetState();
}
class _RestartWidgetState extends State<RestartWidget> {
  Key key = UniqueKey();

  void restartApp() {
    setState(() {
      key = UniqueKey();
    });
  }

  @override
  Widget build(BuildContext context) {
    return KeyedSubtree(
      key: key,
      child: widget.child,
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key,});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();

  }
  @override
  Widget build(BuildContext context) {
    return const SplashScreen();
  }
}
